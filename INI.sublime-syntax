%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: INI
file_extensions:
  - cfg
  - conf
  - inf
  - ini
  - reg
scope: source.ini

variables:
  separator: '[=:]'

contexts:

  prototype:
    - include: comment

  main:
    - match: ^(?:REGDIT4|Windows Registry Editor Version 5\.00)\b
      scope: meta.directive.registry.ini keyword.other.directive.registry.ini
      set: content
    - match: ''
      set: content

  content:
    - include: section
    - include: mapping

  comment:
    - match: ^;
      scope: punctuation.definition.comment.ini
      push:
        - meta_scope: comment.line.semicolon.ini
        - match: \n
          pop: true
    - match: ^#|(?<=\s)#
      scope: punctuation.definition.comment.ini
      push:
        - meta_scope: comment.line.number-sign.ini
        - match: \n
          pop: true

  section:
    - match: \[
      scope: punctuation.definition.section.begin.ini
      push:
        - meta_scope: meta.section.ini
        - match: \-?
          scope: keyword.operator.arithmetic.ini
          set: section-name

  section-name:
    - meta_content_scope: meta.section.ini entity.name.section.ini
    - match: \]
      scope: meta.section.ini punctuation.definition.section.end.ini
      pop: true
    - match: \.
      scope: punctuation.separator.namespace.ini
    - match: \\
      scope: punctuation.separator.backslash.ini
    - match: ':'
      scope: punctuation.separator.colon.ini
    - match: \n
      pop: true

  mapping:
    - match: (?=\S)
      push:
        - meta_content_scope: meta.mapping.key.ini
        - match: (?={{separator}})
          set:
            - meta_content_scope: meta.mapping.ini
            - match: '{{separator}}'
              scope: punctuation.separator.mapping.key-value.ini
              set:
                - meta_content_scope: meta.mapping.value.ini
                - match: \-(?=$)
                  scope: keyword.operator.arithmetic.ini
                - match: \s*$\n
                  set: maybe-value
                - match: ''
                  set:
                    - meta_scope: meta.mapping.value.ini
                    - include: number
                    - include: constant
                    - match: (,)\s*$\n?
                      captures:
                        1: punctuation.separator.sequence.ini
                      set: maybe-value
                    - include: string
                    - match: \n
                      pop: true
        - match: (\[)(\d+)(\])
          captures:
             1: punctuation.section.brackets.begin.ini
             2: constant.numeric.integer.decimal.ini
             3: punctuation.section.brackets.end.ini
        - match: \,
          scope: punctuation.separator.sequence.ini
        - include: string
        - match: \n
          pop: true

  maybe-value:
    - meta_content_scope: meta.mapping.value.ini
    - match: ^(?=\S)
      pop: true
    - match: (?=.+{{separator}})
      pop: true
    - include: number
    - include: constant
    - match: (,)\s*$\n?
      captures:
        1: punctuation.separator.sequence.ini
    - include: string

  constant:
    - match: \b(?i:true|false)\b
      scope: constant.language.ini
    - match: \bdword\b
      scope: storage.type.dword.ini
      set:
        - meta_content_scope: meta.mapping.value.ini
        - match: ':'
          scope: punctuation.separator.colon.ini
          set:
            - meta_content_scope: meta.mapping.value.ini
            - include: hex-number
            - match: \n
              scope: meta.mapping.value.ini
              pop: true
            - match: .
              scope: invalid.illegal.ini
        - match: \n
          scope: meta.mapping.value.ini
          pop: true
        - match: .
          scope: invalid.illegal.ini
    - match: \b(hex\b(?:\([01234578ab]\))?)
      scope: storage.type.hex.ini
      set:
        - meta_content_scope: meta.mapping.value.ini
        - match: ':'
          scope: punctuation.separator.colon.ini
          set:
            - meta_content_scope: meta.mapping.value.ini
            - include: hex-number
            - match: \,
              scope: punctuation.separator.sequence.ini
            - match: (\\)\s*$\n?
              captures:
                1: punctuation.separator.continuation.line.ini
            - match: \n
              scope: meta.mapping.value.ini
              pop: true
            - match: ^\s+
            - match: .
              scope: invalid.illegal.ini
        - match: '[^()01234578ab]'
          scope: invalid.illegal.ini

  hex-number:
    - match: \b\h+\b
      scope: constant.numeric.integer.hexadecimal.ini

  number:
    - match: '[-+]?\b\d*(\.)\d+(?:(?:E|e)[-+]?\d+)?(F|f)?\b'
      scope: constant.numeric.float.decimal.ini
      captures:
        1: punctuation.separator.decimal.ini
        2: storage.type.numeric.ini
    - match: '[-+]?\b\d+\b'
      scope: constant.numeric.integer.decimal.ini

  string:
    - match: \"
      scope: punctuation.definition.string.begin.ini
      push:
        - meta_scope: string.quoted.double.ini
        - include: character-escape
        - match: \"
          scope: punctuation.definition.string.end.ini
          pop: true
        - match: \n
          pop: true
    - match: \'
      scope: punctuation.definition.string.begin.ini
      push:
        - meta_scope: string.quoted.single.ini
        - include: character-escape
        - match: \'
          scope: punctuation.definition.string.end.ini
          pop: true
        - match: \n
          pop: true
    - match: (?=\S)
      push:
        - meta_content_scope: string.unquoted.ini
        - include: character-escape
        - match: (?=[\s=:,\[])
          pop: true

  character-escape:
    - match: \\x\h{4}
      scope: constant.character.escape.ini
    - match: \\(?:[^*\s\w]|[abnrt0])
      scope: constant.character.escape.ini
