%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: INI
file_extensions:
  - ini
  - cfg
  - conf
  - reg
scope: source.ini

contexts:

  prototype:
    - include: comment

  main:
    - match: '^Windows Registry Editor Version 5\.00\b'
      scope: meta.directive.registry.ini keyword.other.directive.registry.ini
      set: content
    - match: ''
      set: content

  content:
    - include: section
    - include: mapping

  comment:
    - match: ^;
      scope: punctuation.definition.comment.ini
      push:
        - meta_scope: comment.line.semicolon.ini
        - match: $\n?
          pop: true
    - match: ^#
      scope: punctuation.definition.comment.ini
      push:
        - meta_scope: comment.line.number-sign.ini
        - match: $\n?
          pop: true

  section:
    - match: \[
      scope: punctuation.definition.section.begin.ini
      push:
        - meta_scope: meta.section.ini
        - match: \.
          scope: entity.name.section.ini punctuation.separator.namespace.ini
        - match: \\
          scope: entity.name.section.ini punctuation.separator.backslash.ini
        - match: \]
          scope: punctuation.definition.section.end.ini
          pop: true
        - match: \S
          scope: entity.name.section.ini
        - match: $\n?
          pop: true

  mapping:
    - match: (?=\S)
      push:
        - meta_content_scope: meta.mapping.key.ini
        - match: '(?=[=:])'
          set:
            - meta_content_scope: meta.mapping.ini
            - match: '[=:]'
              scope: punctuation.separator.mapping.key-value.ini
              set:
                - meta_content_scope: meta.mapping.value.ini
                - include: number
                - include: constant
                - include: string
                - match: $\n?
                  pop: true
        - match: '(\[)(\d+)(\])'
          captures:
             1: punctuation.section.brackets.begin.ini
             2: constant.numeric.integer.decimal.ini
             3: punctuation.section.brackets.end.ini
        - match: \,
          scope: punctuation.separator.sequence.ini
        - include: string
        - match: $\n?
          pop: true

  number:
    - match: '[+-]?\b\d*(\.)\d+(?:(?:E|e)[+-]?\d+)?(F|f)?\b'
      scope: constant.numeric.float.decimal.ini
      captures:
        1: punctuation.separator.decimal.ini
        2: storage.type.numeric.ini
    - match: '[+-]?\b\d+\b'
      scope: constant.numeric.integer.decimal.ini

  hex-number:
    - match: \b\h+\b
      scope: constant.numeric.integer.hexadecimal.ini

  constant:
    - match: \b(?i:true|false)\b
      scope: constant.language.ini
    - match: '\b(dword)(:)'
      captures:
        1: storage.type.dword.ini
        2: punctuation.separator.mapping.key-value.ini
      set:
        - meta_content_scope: meta.mapping.value.ini
        - include: hex-number
        - match: $\n?
          pop: true
    - match: '\b(hex(?:\([01234578ab]\))?)(:)'
      captures:
        1: storage.type.hex.ini
        2: punctuation.separator.mapping.key-value.ini
      set:
        - meta_content_scope: meta.mapping.value.ini
        - include: hex-number
        - match: \,
          scope: punctuation.separator.sequence.ini
        - match: \\
          scope: constant.character.line-continuation.ini
        - match: '(?<!\\)\n'
          pop: true

  string:
    - match: \"
      scope: punctuation.definition.string.begin.ini
      push:
        - meta_scope: string.quoted.double.ini
        - include: character-escape
        - match: \"
          scope: punctuation.definition.string.end.ini
          pop: true
        - match: $\n?
          pop: true
    - match: \'
      scope: punctuation.definition.string.begin.ini
      push:
        - meta_scope: string.quoted.single.ini
        - include: character-escape
        - match: \'
          scope: punctuation.definition.string.end.ini
          pop: true
        - match: $\n?
          pop: true
    - match: '(?=\S)'
      push:
        - meta_content_scope: string.unquoted.ini
        - include: character-escape
        - match: '(?=[\s=:,\[])'
          pop: true
        - match: $\n?
          pop: true

  character-escape:
    - match: '\\x\h{4}'
      scope: constant.character.escape.ini
    - match: '\\(?:[^*\s\w]|[abnrt0])'
      scope: constant.character.escape.ini
